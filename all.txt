The frontend codes are as below
App.jsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Navbar from './components/Navbar';
import Landing from './pages/Landing';
import Dashboard from './pages/Dashboard';
import CreateCapsule from './pages/CreateCapsule';
import EditCapsule from './pages/EditCapsule';
import Notifications from './pages/Notifications';
import Settings from './pages/Settings';
import Login from './pages/Login';
import Register from './pages/Register';
import ProtectedRoute from './components/ProtectedRoute'; // Make sure this is imported
import { AuthProvider } from './context/AuthContext';
import AboutUs from './pages/AboutUs';
import './index.css';

function App() {
  return (
    <AuthProvider>
      <Router>
        <div className="min-h-screen bg-gray-50">
          <Navbar />
          <Routes>
            <Route path="/" element={<Landing />} />
            <Route path="/login" element={<Login />} />
            <Route path="/register" element={<Register />} />
            <Route path="/about-us" element={<AboutUs />} />
            <Route path="/dashboard" element={
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            } />
            <Route path="/create" element={
              <ProtectedRoute>
                <CreateCapsule />
              </ProtectedRoute>
            } />
            <Route path="/edit/:id" element={
              <ProtectedRoute>
                <EditCapsule />
              </ProtectedRoute>
            } />
            <Route path="/notifications" element={
              <ProtectedRoute>
                <Notifications />
              </ProtectedRoute>
            } />
            <Route path="/settings" element={
              <ProtectedRoute>
                <Settings />
              </ProtectedRoute>
            } />
          </Routes>
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;

CreateCapsule.jsx
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { format } from 'date-fns';
import './stylesheet/CreateCapsule.css'; // Import the CSS file

export default function CreateCapsule() {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    title: '',
    message: '',
    recipientEmail: '',
    unlockDate: format(new Date().setMonth(new Date().getMonth() + 1), 'yyyy-MM-dd'),
    image: null
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    // In a real app, this would be an API call
    console.log('Capsule created:', formData);
    navigate('/dashboard');
  };

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'image') {
      setFormData(prev => ({
        ...prev,
        image: files[0]
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  return (
    <div className="create-capsule-container">
      <h1 className="create-capsule-heading">Create New Time Capsule</h1>
      
      <form onSubmit={handleSubmit} className="create-capsule-form">
        <div className="form-group">
          <label htmlFor="title" className="form-label">Title</label>
          <input
            type="text"
            id="title"
            name="title"
            required
            className="form-input"
            value={formData.title}
            onChange={handleChange}
          />
        </div>

        <div className="form-group">
          <label htmlFor="message" className="form-label">Message</label>
          <textarea
            id="message"
            name="message"
            rows={4}
            required
            className="form-textarea"
            value={formData.message}
            onChange={handleChange}
          />
        </div>

        <div className="form-group">
          <label htmlFor="recipientEmail" className="form-label">Recipient Email</label>
          <input
            type="email"
            id="recipientEmail"
            name="recipientEmail"
            required
            className="form-input"
            value={formData.recipientEmail}
            onChange={handleChange}
          />
        </div>

        <div className="form-group">
          <label htmlFor="unlockDate" className="form-label">Unlock Date</label>
          <input
            type="date"
            id="unlockDate"
            name="unlockDate"
            required
            min={format(new Date(), 'yyyy-MM-dd')}
            className="form-input"
            value={formData.unlockDate}
            onChange={handleChange}
          />
        </div>

        <div className="form-group">
          <label htmlFor="image" className="form-label">Image (optional)</label>
          <input
            type="file"
            id="image"
            name="image"
            accept="image/*"
            className="form-file-input"
            onChange={handleChange}
          />
        </div>

        <div className="form-actions">
          <button
            type="button"
            onClick={() => navigate('/dashboard')}
            className="form-button-cancel"
          >
            Cancel
          </button>
          <button
            type="submit"
            className="form-button-submit"
          >
            Create Capsule
          </button>
        </div>
      </form>
    </div>
  );
}

Dashboard.jsx
import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import CapsuleCard from '../components/CapsuleCard';
import './stylesheet/Dashboard.css'; // Import the CSS file

export default function Dashboard() {
  const [capsules, setCapsules] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Mock data - in a real app, this would be an API call
    const mockCapsules = [
      {
        id: 1,
        title: "Birthday Wishes",
        message: "Happy 30th birthday! Here's to many more amazing years!",
        recipientEmail: "friend@example.com",
        unlockDate: "2024-12-25",
        imageUrl: "https://i.imgur.com/CzXTtJV.jpg"
      },
      {
        id: 2,
        title: "Time Capsule 2025",
        message: "Remember where you were when you wrote this...",
        recipientEmail: "future@example.com",
        unlockDate: "2025-01-01"
      }
    ];
    
    setCapsules(mockCapsules);
    setLoading(false);
  }, []);

  const handleDelete = (id) => {
    // In a real app, this would make an API call
    setCapsules(capsules.filter(capsule => capsule.id !== id));
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
      </div>
    );
  }

  return (
    <div className="dashboard-container">
      <div className="header">
        <h1 className="title">Your Time Capsules</h1>
        <Link to="/create" className="create-button">
          Create New Capsule
        </Link>
      </div>

      {capsules.length === 0 ? (
        <div className="no-capsules">
          <h3 className="message">No time capsules yet</h3>
          <p className="description">Create your first time capsule to get started!</p>
        </div>
      ) : (
        <div className="capsules-grid">
          {capsules.map((capsule) => (
            <CapsuleCard key={capsule.id} capsule={capsule} onDelete={handleDelete} />
          ))}
        </div>
      )}
    </div>
  );
}

EditCapsule.jsx
import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { format } from 'date-fns';
import './stylesheet/EditCapsule.css'; // Import the CSS file

export default function EditCapsule() {
  const navigate = useNavigate();
  const { id } = useParams();
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState(null);

  useEffect(() => {
    // Mock API call to get capsule data
    const mockCapsule = {
      id: parseInt(id),
      title: "Birthday Wishes",
      message: "Happy 30th birthday! Here's to many more amazing years!",
      recipientEmail: "friend@example.com",
      unlockDate: "2024-12-25",
      imageUrl: "https://placekitten.com/300/200"
    };

    setFormData(mockCapsule);
    setLoading(false);
  }, [id]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    // In a real app, this would be an API call
    console.log('Capsule updated:', formData);
    navigate('/dashboard');
  };

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'image') {
      setFormData((prev) => ({
        ...prev,
        image: files[0]
      }));
    } else {
      setFormData((prev) => ({
        ...prev,
        [name]: value
      }));
    }
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
      </div>
    );
  }

  return (
    <div className="edit-capsule-container">
      <h1 className="edit-capsule-title">Edit Time Capsule</h1>
      <form onSubmit={handleSubmit} className="edit-capsule-form">
        <div className="form-group">
          <label htmlFor="title">Title</label>
          <input
            type="text"
            id="title"
            name="title"
            required
            value={formData.title}
            onChange={handleChange}
          />
        </div>

        <div className="form-group">
          <label htmlFor="message">Message</label>
          <textarea
            id="message"
            name="message"
            rows={4}
            required
            value={formData.message}
            onChange={handleChange}
          />
        </div>

        <div className="form-group">
          <label htmlFor="recipientEmail">Recipient Email</label>
          <input
            type="email"
            id="recipientEmail"
            name="recipientEmail"
            required
            value={formData.recipientEmail}
            onChange={handleChange}
          />
        </div>

        <div className="form-group">
          <label htmlFor="unlockDate">Unlock Date</label>
          <input
            type="date"
            id="unlockDate"
            name="unlockDate"
            required
            min={format(new Date(), 'yyyy-MM-dd')}
            value={formData.unlockDate}
            onChange={handleChange}
          />
        </div>

        <div className="form-group">
          <label htmlFor="image">Image (optional)</label>
          {formData.imageUrl && (
            <div className="current-image">
              <img src={formData.imageUrl} alt="Current capsule" />
            </div>
          )}
          <input
            type="file"
            id="image"
            name="image"
            accept="image/*"
            onChange={handleChange}
          />
        </div>

        <div className="form-actions">
          <button type="button" onClick={() => navigate('/dashboard')} className="cancel-button">
            Cancel
          </button>
          <button type="submit" className="submit-button">
            Save Changes
          </button>
        </div>
      </form>
    </div>
  );
}

Login.jsx
import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import './stylesheet/Login.css';

export default function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // In a real app, you'd make an API call here
      login({ email }); // Mock login
      console.log("SUCCCESSS")
      navigate('/dashboard');
    } catch (err) {
      setError('Invalid credentials');
    }
  };

  return (
    <div className="login-container">
      <div className="login-card">
        <div>
          <h2 className="login-header">
            Login
          </h2>
        </div>
        <form className="login-form" onSubmit={handleSubmit}>
          {error && (
            <div className="login-error">
              <div className="error-text">{error}</div>
            </div>
          )}
          <div className="input-group">
            <div className="input-field-container">
              <label htmlFor="email" className="input-label">
                Email Address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                className="input-field"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div className="input-field-container">
              <label htmlFor="password" className="input-label">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                className="input-field"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              className="login-button"
            >
              Sign in
            </button>
          </div>

          <div className="text-sm text-center">
            <Link to="/register" className="register-link">
              Don't have an account? Sign up
            </Link>
          </div>
        </form>
      </div>
    </div>
  );
}

Register.jsx
import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import './stylesheet/Register.css'; // Import CSS

export default function Register() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
  });
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const { login } = useAuth();

  // const handleSubmit = async (e) => {
  //   e.preventDefault();
  //   if (formData.password !== formData.confirmPassword) {
  //     setError('Passwords do not match');
  //     return;
  //   }
  //   try {
  //     // Mock registration and login
  //     login({ email: formData.email });
  //     navigate('/dashboard');
  //   } catch (err) {
  //     setError('Registration failed');
  //   }
  // };

  // const handleChange = (e) => {
  //   setFormData({
  //     ...formData,
  //     [e.target.name]: e.target.value,
  //   });
  // };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    try {
      // In a real app, you'd make an API call here
      login({ email: formData.email }); // Mock registration and login
      navigate('/dashboard');
    } catch (err) {
      setError('Registration failed');
    }
  };

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };


  return (
    <div className="register-container">
      <div className="register-card">
      <h2 className="register-title">Register</h2>
        <form onSubmit={handleSubmit} className="register-form">
          {error && <div className="error-message">{error}</div>}

          <div className="form-group">
            <label htmlFor="name" className="form-label">
              Full Name
            </label>
            <input
              id="name"
              name="name"
              type="text"
              value={formData.name}
              onChange={handleChange}
              className="input-field"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="email" className="form-label">
              Email Address
            </label>
            <input
              id="email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleChange}
              className="input-field"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="password" className="form-label">
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              value={formData.password}
              onChange={handleChange}
              className="input-field"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="confirmPassword" className="form-label">
              Confirm Password
            </label>
            <input
              id="confirmPassword"
              name="confirmPassword"
              type="password"
              value={formData.confirmPassword}
              onChange={handleChange}
              className="input-field"
              required
            />
          </div>

          <button type="submit" className="submit-button">
            Register
          </button>

          <div className="redirect-message">
            Already have an account?{' '}
            <Link to="/login" className="redirect-link">
              Sign in
            </Link>
          </div>
        </form>
      </div>
    </div>
  );
}

Settings.jsx
import { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import './stylesheet/Settings.css'; // Import the CSS file

export default function Settings() {
  const { user } = useAuth();
  const [formData, setFormData] = useState({
    name: 'John Doe',
    email: user?.email || '',
    notifications: true,
    emailUpdates: true,
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    // In a real app, this would be an API call
    console.log('Settings updated:', formData);
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  return (
    <div className="settings-container">
      <h1 className="settings-title">Account Settings</h1>

      <form onSubmit={handleSubmit} className="settings-form">
        <div className="form-section">
          <h2 className="section-title">Profile Information</h2>
          <div className="field-group">
            <div className="form-field">
              <label htmlFor="name" className="field-label">Name</label>
              <input
                type="text"
                id="name"
                name="name"
                className="field-input"
                value={formData.name}
                onChange={handleChange}
              />
            </div>
            <div className="form-field">
              <label htmlFor="email" className="field-label">Email</label>
              <input
                type="email"
                id="email"
                name="email"
                className="field-input"
                value={formData.email}
                onChange={handleChange}
              />
            </div>
          </div>
        </div>

        <div className="form-section">
          <h2 className="section-title">Notifications</h2>
          <div className="checkbox-group">
            <div className="checkbox-field">
              <input
                id="notifications"
                name="notifications"
                type="checkbox"
                className="checkbox-input"
                checked={formData.notifications}
                onChange={handleChange}
              />
              <label htmlFor="notifications" className="checkbox-label">
                Push Notifications
              </label>
              <p className="checkbox-description">
                Receive notifications when your time capsules are unlocked.
              </p>
            </div>
            <div className="checkbox-field">
              <input
                id="emailUpdates"
                name="emailUpdates"
                type="checkbox"
                className="checkbox-input"
                checked={formData.emailUpdates}
                onChange={handleChange}
              />
              <label htmlFor="emailUpdates" className="checkbox-label">
                Email Updates
              </label>
              <p className="checkbox-description">
                Receive email notifications about your time capsules.
              </p>
            </div>
          </div>
        </div>

        <div className="form-actions">
          <button type="submit" className="submit-button">Save Changes</button>
        </div>
      </form>
    </div>
  );
}

AuthContext.jsx
import { createContext, useContext, useState } from 'react';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  const login = (userData) => {
    setUser(userData); // Set user after successful login
  };

  const logout = () => {
    setUser(null); // Log the user out
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

ProtectedRoute.jsx
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { user } = useAuth(); // Assuming user holds the logged-in user's data

  if (!user) {
    // Redirect to login if no user is logged in
    return <Navigate to="/login" />;
  }

  return children; // Render the protected route if user is authenticated
};

export default ProtectedRoute;